openapi: 3.0.3
info:
  title: FlowGrid API
  description: ユーザー、企業、プロジェクト、タスク、チーム、ドキュメント等を管理するためのAPIシステム
  version: 1.0.0
servers:
  - url: http://localhost:8080/v1
    description: Development server
tags:
  - name: User
    description: ユーザー管理
  - name: Company
    description: 企業管理
  - name: Project
    description: プロジェクト管理
  - name: Task
    description: タスク管理
  - name: Sprint
    description: スプリント管理
  - name: Comment
    description: コメント管理
  - name: Team
    description: チーム管理
  - name: Document
    description: ドキュメント管理
  - name: Role
    description: 役割管理
  - name: Service
    description: サービス管理
  - name: Status
    description: ステータス管理

paths:
  /users:
    get:
      tags: [User]
      summary: 全ユーザー取得
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [User]
      summary: 新規ユーザー作成
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{id}:
    get:
      tags: [User]
      summary: ユーザー取得
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [User]
      summary: ユーザー更新
      operationId: updateUserById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [User]
      summary: ユーザー削除
      operationId: deleteUserById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: User deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /companies:
    get:
      tags: [Company]
      summary: 全企業取得
      operationId: getAllCompanies
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of companies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Company]
      summary: 企業作成
      operationId: createCompany
      requestBody:
        $ref: '#/components/requestBodies/Company'
      responses:
        '201':
          description: Company created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /companies/{id}:
    get:
      tags: [Company]
      summary: 企業取得
      operationId: getCompanyById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single company.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Company]
      summary: 企業更新
      operationId: updateCompanyById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Company'
      responses:
        '200':
          description: Company updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Company]
      summary: 企業削除
      operationId: deleteCompanyById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Company deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /projects:
    get:
      tags: [Project]
      summary: 全プロジェクト取得
      operationId: getAllProjects
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of projects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Project]
      summary: プロジェクト作成
      operationId: createProject
      requestBody:
        $ref: '#/components/requestBodies/Project'
      responses:
        '201':
          description: Project created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /projects/{id}:
    get:
      tags: [Project]
      summary: プロジェクト取得
      operationId: getProjectById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single project.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Project]
      summary: プロジェクト更新
      operationId: updateProjectById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Project'
      responses:
        '200':
          description: Project updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Project]
      summary: プロジェクト削除
      operationId: deleteProjectById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Project deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /tasks:
    get:
      tags: [Task]
      summary: 全タスク取得
      operationId: getAllTasks
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: A list of tasks.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Task]
      summary: タスク作成
      operationId: createTask
      requestBody:
        $ref: '#/components/requestBodies/Task'
      responses:
        '201':
          description: Task created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{id}:
    get:
      tags: [Task]
      summary: タスク取得
      operationId: getTaskById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single task.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Task]
      summary: タスク更新
      operationId: updateTaskById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Task'
      responses:
        '200':
          description: Task updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Task]
      summary: タスク削除
      operationId: deleteTaskById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Task deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /sprints:
    get:
      tags: [Sprint]
      summary: 全スプリント取得
      operationId: getAllSprints
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: A list of sprints.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sprint'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Sprint]
      summary: スプリント作成
      operationId: createSprint
      requestBody:
        $ref: '#/components/requestBodies/Sprint'
      responses:
        '201':
          description: Sprint created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sprint'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /sprints/{id}:
    get:
      tags: [Sprint]
      summary: スプリント取得
      operationId: getSprintById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single sprint.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sprint'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Sprint]
      summary: スプリント更新
      operationId: updateSprintById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Sprint'
      responses:
        '200':
          description: Sprint updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sprint'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Sprint]
      summary: スプリント削除
      operationId: deleteSprintById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Sprint deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /comments:
    get:
      tags: [Comment]
      summary: 全コメント取得
      operationId: getAllComments
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: A list of comments.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Comment]
      summary: コメント作成
      operationId: createComment
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        '201':
          description: Comment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /comments/{id}:
    get:
      tags: [Comment]
      summary: コメント取得
      operationId: getCommentById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single comment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Comment]
      summary: コメント更新
      operationId: updateCommentById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        '200':
          description: Comment updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Comment]
      summary: コメント削除
      operationId: deleteCommentById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Comment deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /teams:
    get:
      tags: [Team]
      summary: 全チームメンバー取得
      operationId: getAllTeams
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/ProjectId'
      responses:
        '200':
          description: A list of team members.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Team]
      summary: チームメンバー追加
      operationId: createTeamMember
      requestBody:
        $ref: '#/components/requestBodies/Team'
      responses:
        '201':
          description: Team member added successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /teams/{id}:
    get:
      tags: [Team]
      summary: チームメンバー取得
      operationId: getTeamMemberById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single team member.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Team]
      summary: チームメンバー更新
      operationId: updateTeamMemberById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Team'
      responses:
        '200':
          description: Team member updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Team]
      summary: チームメンバー削除
      operationId: deleteTeamMemberById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Team member deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /documents:
    get:
      tags: [Document]
      summary: 全ドキュメント取得
      operationId: getAllDocuments
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/ProjectId'
        - $ref: '#/components/parameters/TaskId'
      responses:
        '200':
          description: A list of documents.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Document]
      summary: ドキュメント作成
      operationId: createDocument
      requestBody:
        $ref: '#/components/requestBodies/Document'
      responses:
        '201':
          description: Document created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /documents/{id}:
    get:
      tags: [Document]
      summary: ドキュメント取得
      operationId: getDocumentById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single document.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Document]
      summary: ドキュメント更新
      operationId: updateDocumentById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Document'
      responses:
        '200':
          description: Document updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Document]
      summary: ドキュメント削除
      operationId: deleteDocumentById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Document deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'
  /roles:
    get:
      tags: [Role]
      summary: 全ロール取得
      operationId: getAllRoles
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of roles.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Role]
      summary: ロール作成
      operationId: createRole
      requestBody:
        $ref: '#/components/requestBodies/Role'
      responses:
        '201':
          description: Role created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /roles/{id}:
    get:
      tags: [Role]
      summary: ロール取得
      operationId: getRoleById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single role.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Role]
      summary: ロール更新
      operationId: updateRoleById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Role'
      responses:
        '200':
          description: Role updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Role]
      summary: ロール削除
      operationId: deleteRoleById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Role deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /services:
    get:
      tags: [Service]
      summary: 全サービス取得
      operationId: getAllServices
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - name: company_id
          in: query
          description: Filter by company ID.
          schema:
            type: integer
      responses:
        '200':
          description: A list of services.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Service]
      summary: サービス作成
      operationId: createService
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '201':
          description: Service created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /services/{id}:
    get:
      tags: [Service]
      summary: サービス取得
      operationId: getServiceById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Service]
      summary: サービス更新
      operationId: updateServiceById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Service'
      responses:
        '200':
          description: Service updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Service]
      summary: サービス削除
      operationId: deleteServiceById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Service deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

  /statuses:
    get:
      tags: [Status]
      summary: 全ステータス取得
      operationId: getAllStatuses
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: A list of statuses.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Status]
      summary: ステータス作成
      operationId: createStatus
      requestBody:
        $ref: '#/components/requestBodies/Status'
      responses:
        '201':
          description: Status created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /statuses/{id}:
    get:
      tags: [Status]
      summary: ステータス取得
      operationId: getStatusById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '200':
          description: A single status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Status]
      summary: ステータス更新
      operationId: updateStatusById
      parameters:
        - $ref: '#/components/parameters/Id'
      requestBody:
        $ref: '#/components/requestBodies/Status'
      responses:
        '200':
          description: Status updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      tags: [Status]
      summary: ステータス削除
      operationId: deleteStatusById
      parameters:
        - $ref: '#/components/parameters/Id'
      responses:
        '204':
          description: Status deleted successfully.
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    # Base Schemas
    UserBase:
      type: object
      required: [ "name", "email", "role_id" ]
      properties:
        name:
          type: string
          example: "田中太郎"
        email:
          type: string
          format: email
          example: "tanaka@example.com"
        role_id:
          type: integer
          example: 1
    CompanyBase:
      type: object
      required: [ "name", "domain" ]
      properties:
        name:
          type: string
          example: "株式会社サンプル"
        domain:
          type: string
          example: "sample.co.jp"
        address:
          type: string
          example: "東京都渋谷区1-1-1"
    ProjectBase:
      type: object
      required: [ "name" ]
      properties:
        name:
          type: string
          example: "Webアプリケーション開発"
    TaskBase:
      type: object
      required: [ "title", "user_id", "project_id", "status_id" ]
      properties:
        title:
          type: string
          example: "ログイン機能の実装"
        description:
          type: string
          example: "ユーザー認証システムを実装する"
        user_id:
          type: integer
        project_id:
          type: integer
        sprint_id:
          type: integer
        status_id:
          type: integer
    SprintBase:
      type: object
      required: [ "name", "project_id", "start_date", "end_date" ]
      properties:
        name:
          type: string
          example: "スプリント1"
        project_id:
          type: integer
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
    CommentBase:
      type: object
      required: [ "content", "user_id", "task_id" ]
      properties:
        content:
          type: string
          example: "進捗について確認します"
        user_id:
          type: integer
        task_id:
          type: integer
    TeamBase:
      type: object
      required: [ "project_id", "user_id", "role_id" ]
      properties:
        project_id:
          type: integer
        user_id:
          type: integer
        role_id:
          type: integer
    DocumentBase:
      type: object
      required: [ "title", "content", "project_id" ]
      properties:
        title:
          type: string
          example: "要件定義書"
        content:
          type: string
          example: "このドキュメントは..."
        project_id:
          type: integer
        task_id:
          type: integer
    RoleBase:
      type: object
      required: [ "name", "description", "permissions" ]
      properties:
        name:
          type: string
          example: "管理者"
        description:
          type: string
          example: "プロジェクトの管理者"
        permissions:
          type: array
          items:
            type: string
            example: "プロジェクトの作成"
    ServiceBase:
      type: object
      required: [ "name", "description" ]
      properties:
        name:
          type: string
          example: "ユーザー管理サービス"
        description:
          type: string
          example: "ユーザー情報を管理するサービス"
    StatusBase:
      type: object
      required: [ "name", "description" ]
      properties:
        name:
          type: string
          example: "進行中"
        description:
          type: string
          example: "タスクが進行中であることを示します"

    # Response Schemas
    IdField:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
    TimestampFields:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    User:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/UserBase'
        - $ref: '#/components/schemas/TimestampFields'
    Company:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/CompanyBase'
        - $ref: '#/components/schemas/TimestampFields'
    Project:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/ProjectBase'
        - $ref: '#/components/schemas/TimestampFields'
    Task:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/TaskBase'
        - $ref: '#/components/schemas/TimestampFields'
    Sprint:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/SprintBase'
        - $ref: '#/components/schemas/TimestampFields'
    Comment:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/CommentBase'
        - $ref: '#/components/schemas/TimestampFields'
    Team:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/TeamBase'
        - $ref: '#/components/schemas/TimestampFields'
    Document:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/DocumentBase'
        - $ref: '#/components/schemas/TimestampFields'
    Role:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/RoleBase'
        - $ref: '#/components/schemas/TimestampFields'
    Service:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/ServiceBase'
        - $ref: '#/components/schemas/TimestampFields'
    Status:
      allOf:
        - $ref: '#/components/schemas/IdField'
        - $ref: '#/components/schemas/StatusBase'
        - $ref: '#/components/schemas/TimestampFields'

    # Other Schemas
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: A human-readable error message.
        code:
          type: string
          description: An internal error code.

  parameters:
    Id:
      name: id
      in: path
      description: The ID of the resource.
      required: true
      schema:
        type: integer
    Limit:
      name: limit
      in: query
      description: The number of items to return.
      schema:
        type: integer
        default: 20
    Offset:
      name: offset
      in: query
      description: The number of items to skip.
      schema:
        type: integer
        default: 0
    ProjectId:
      name: project_id
      in: query
      description: Filter by project ID.
      schema:
        type: integer
    TaskId:
      name: task_id
      in: query
      description: Filter by task ID.
      schema:
        type: integer
    UserId:
      name: user_id
      in: query
      description: Filter by user ID.
      schema:
        type: integer

  requestBodies:
    User:
      description: User object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserBase'
    Company:
      description: Company object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CompanyBase'
    Project:
      description: Project object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProjectBase'
    Task:
      description: Task object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskBase'
    Sprint:
      description: Sprint object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SprintBase'
    Comment:
      description: Comment object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommentBase'
    Team:
      description: Team object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamBase'
    Document:
      description: Document object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DocumentBase'
    Role:
      description: Role object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/RoleBase'
    Service:
      description: Service object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ServiceBase'
    Status:
      description: Status object that needs to be added or updated.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/StatusBase'

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal Server Error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: []
